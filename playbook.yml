# playbook.yml
- name: Full setup for Kubernetes cluster with local Docker registry and application deployment
  hosts: all
  become: yes
  vars:
    developer_app_path: "/path/to/developer/app"  # Set the path to your developer's application code
  tasks:
  
    # Step 1: Install Docker
    - name: Update apt packages
      apt:
        update_cache: yes
    
    - name: Install Docker
      apt:
        name: docker.io
        state: present

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: true

    # Step 2: Install Kubernetes
    - name: Install Kubernetes prerequisites
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - curl

    - name: Add Kubernetes signing key
      shell: "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -"

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
        state: present

    - name: Install kubeadm, kubelet and kubectl
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - kubeadm
        - kubelet
        - kubectl

    # Step 3: Initialize Kubernetes cluster
    - name: Initialize Kubernetes cluster
      shell: "kubeadm init --pod-network-cidr=10.244.0.0/16"
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Set up kubeconfig for the root user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes

    # Step 4: Install Flannel Network Plugin
    - name: Apply Flannel network plugin
      shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

    # Step 5: Deploy Docker Registry to Kubernetes
    - name: Create registry YAML file
      copy:
        dest: /root/registry.yml
        content: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: registry
            labels:
              app: registry
          spec:
            containers:
            - name: registry
              image: registry:2
              ports:
              - containerPort: 5000
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: registry-service
          spec:
            selector:
              app: registry
            ports:
            - protocol: TCP
              port: 5000
              targetPort: 5000

    - name: Apply Docker registry deployment
      command: kubectl apply -f /root/registry.yml

    # Step 6: Build and Push Developer Application to Local Registry
    - name: Build Docker image for application
      shell: "docker build -t localhost:5000/developer-app:latest {{ developer_app_path }}"

    - name: Push application image to local registry
      shell: "docker push localhost:5000/developer-app:latest"

    # Step 7: Deploy Application in Kubernetes
    - name: Create application deployment YAML file
      copy:
        dest: /root/app-deployment.yml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: developer-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: developer-app
            template:
              metadata:
                labels:
                  app: developer-app
              spec:
                containers:
                - name: developer-app
                  image: localhost:5000/developer-app:latest
                  ports:
                  - containerPort: 80

    - name: Apply application deployment
      command: kubectl apply -f /root/app-deployment.yml
